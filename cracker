#!/bin/bash

#todo:
#* fix this: This will not remove the mention of that package from its creator index! may result in unexpected issues.
#* add --remove option ( where you can specify package name and it will remove that, requires rework of index file. 
#* add --alias option ( where you can provide alternativ name for particular binary. 
#*. ?

function error_exit { echo -e "\e[31m${@}\e[0m" 1>&2; exit 1; }
function warn { echo -e "\e[33m${@}\e[0m"; }
function info { echo -e "\e[32m${@}\e[0m"; }

function usage
{
  cat << EOF
usage: cracker [-r --disable-rh-check] [-d --deduce ] [-g --global-cache] [-o conan_option ... ] [-s conan_settings ... ]  conan_package [binaries...]
 -r --disable-rh-check - by default the script checks whether you are on rh6 (if the file redhat-release exists ), this is due to limitation 
                         of the environment author currently works, if you are happy with your os and dont plan to use other ones add -r.

 -d --deduce - instead of having list the binaries cracker would have to wrap cracker will deduce the list of binaries.
               it will create wrappers for all binaries existing in the bin directory of particular package.
 -g --global-cache - by default cracker will install packages into its .cracker_index - so it will instrument conan to use that as storage.path.
                     therefore by default it only works with packages that are available on remote repositories. if you want to use a package you've built locally
                     consider passing -g.
 -o conan_option - can be present multiple times. is propagated as is into conan install command.
 -s conan_setting - can be present multiple times. is propagated as is into conan install command.
 -sp --storage-path - can be used instead of CRACKER_STORAGE_DIR environmental variable
 -e - generate enable script.
 --list - list your build tree.
 --delete conan_package: removes wrapper introduced by particular package.

ENV variables:
CRACKER_STORAGE_DIR - defaults to ~/
  tells cracker where it should store the artifacts and its files. cracker will create a subdirectory '.cracker_storage'.
CRACKER_STORAGE_BIN - defaults to ${CRACKER_STORAGE_DIR}/bin


example invocations:
  cracker git/2.26.1 -d  
    will install git into your local cracker_storage and by deducing the binaries git exposes it will create wrappers for example it will create wrapper for git
  cracker git/2.26.1 git
    will install git into your local cracker_storage and will create a wrapper for 'git' binary only.
      warning: this does not check whether binary 'git' exists in particlar package. (mb it will in the future)
  cracker git/2.26.1 git -g -d
    will install git into your local cracker_storage, but wrappers will use your standard $CONAN_USER_HOME as a storage.path.

EOF
  if [[ -n "$1" ]]; then
    warn "whereas you invoked:"
    warn "cracker ${@}"
  fi
}

function rh6_check {
  if [ -n "$skip_rh_check" ]; then
    return 0
  fi
  if [ -f /etc/redhat-release ]; then
    major_v=$(sed -r  's@.*release ([0-9])+\..*@\1@g' /etc/redhat-release)
    if [[ "$major_v" != 6 ]]; then
      error_exit "you are not on rh6! if you want to have a single .cracker_storage consider using this on rh6. read usage for more details."
    fi
  else
    error_exit "you are not on rh/centos. disable this option!"
  fi
}

function ask_user {
  while true; do
    read -p "$1 Do you wish to $2 Yn " yn
    case $yn in
      [Yy]* ) return 0;;
      [Nn]* ) return 1;;
      * ) echo "yn please.";
  esac
done
}

function index_file { echo "${CRACKER_STORAGE_DIR}/.cracker_index"; }

function elementIn {
  local e match="$1"
  shift
  for e; do [[ "$e" == "$match" ]] && return 0; done
  return 1
}

function is_name_cracked {
  grep -w "^$1" $(index_file) >> /dev/null
}

function is_wrapped {
  readarray rows < $(index_file)
  for row_line in "${rows[@]}"; do
    row=(${row_line})
    package="${row[0]}"
    row=("${row[@]:2}")
    if elementIn "$1" "${row[@]}"; then
      echo "$package"
      return 0
    fi
  done
  return 1
}

function extract_cracked_owner {
  readarray rows < $(index_file)
  for row_line in "${rows[@]}"; do
    row=(${row_line})
    package="${row[0]}"
    row=("${row[@]:2}")
    if elementIn "$1" "${row[@]}"; then
      echo "$package"
      return 0
    fi
  done
  return 1
}

function list_cracked {
  readarray rows < $(index_file)
  echo "Listing cracked packages and generated wrappers."
  for row_line in "${rows[@]}"; do
    row=(${row_line})
    package="${row[0]}"
    version="${row[1]}"
    row=("${row[@]:2}")
    echo "${package}/${version}: ${row[@]}" 
  done
}

function delete_cracked {
  readarray rows < $(index_file)
  warn "Deleting does not delete these from conan_cache. if you want to delete stuff from conan cache its better to start from scratch"
  for row_line in "${rows[@]}"; do
    row=(${row_line})
    package_name="${row[0]}"
    row=("${row[@]:2}")
    if [[ "$package_name" == "$1" ]]; then
      for wrapper in "${row[@]}"; do
        rm "${CRACKER_STORAGE_BIN}/${wrapper}"
      done
      remove_row "$1"
    fi
  done
}

function append_cracked_to_index {
  wrapper_name="$1"

  readarray rows < $(index_file)
  rm $(index_file)
  for row_line in "${rows[@]}"; do
    row_line=${row_line//[$'\t\r\n']}
    row=(${row_line})
    package="${row[0]}"
    if [[ "${package}" == "${conan_package_name}" ]]; then
      echo "${row_line}$wrapper_name " >> $(index_file) #space at the end is important!
      return 0
    else
      echo "${row_line} " >> $(index_file)
    fi
  done
  echo "${conan_package_name} ${conan_package_version} $wrapper_name " >> $(index_file)
}

function remove_entry {
  #super hacky, but.. basically ignore first two words and then remove <space>name<space> and replace with space.
  sed -i -E "s@([^\s]+ [^\s]+)(.*)* $1 @\1 @g" $(index_file)
}
function remove_row {
  sed -i -E "/^$1\s/d" $(index_file)
}

function init_cache {
  if [ -z "${CRACKER_STORAGE_DIR}" ]; then
    CRACKER_STORAGE_DIR=~/.cracker_storage
    CRACKER_STORAGE_BIN=${CRACKER_STORAGE_BIN:-~/bin}
  else
    CRACKER_STORAGE_BIN=${CRACKER_STORAGE_BIN:-${CRACKER_STORAGE_DIR}/bin}
    CRACKER_STORAGE_DIR=${CRACKER_STORAGE_DIR}/.cracker_storage
  fi

  CRACKER_STORAGE_DIR=${CRACKER_STORAGE_DIR:-~/.cracker_storage}

  mkdir -p $CRACKER_STORAGE_BIN || error_exit "unable to create BIN dir ${CRACKER_STORAGE_BIN} check rights."
  mkdir -p $CRACKER_STORAGE_DIR || error_exit "unable to create storage dir ${CRACKER_STORAGE_DIR} check rights"
  touch -a $(index_file)
}

function validate_args {
  expected_arg_count=2
  if [[ -n "$deduce_binaries" ]]; then
    expected_arg_count=1
  fi
  if [[ -n "$delete_wrappers" ]]; then
    return 0
  fi
  if [ "${#args[@]}" -lt $expected_arg_count ]; then
    usage ${orig_args[@]}
    error_exit "not enough argument passed in, see usage above."
  fi
  rh6_check
}

function init_cache {
  if [ -z "${CRACKER_STORAGE_DIR}" ]; then
    CRACKER_STORAGE_DIR=~/.cracker_storage
    CRACKER_STORAGE_BIN=${CRACKER_STORAGE_BIN:-~/bin}
  else
    CRACKER_STORAGE_BIN=${CRACKER_STORAGE_BIN:-${CRACKER_STORAGE_DIR}/bin}
    CRACKER_STORAGE_DIR=${CRACKER_STORAGE_DIR}/.cracker_storage
  fi

  CRACKER_STORAGE_DIR=${CRACKER_STORAGE_DIR:-~/.cracker_storage}

  mkdir -p $CRACKER_STORAGE_BIN || error_exit "unable to create BIN dir ${CRACKER_STORAGE_BIN} check rights."
  mkdir -p $CRACKER_STORAGE_DIR || error_exit "unable to create storage dir ${CRACKER_STORAGE_DIR} check rights"
  touch -a $(index_file)
}
function generate_enable_script {
  if [[ -n "$generate_enable" ]]; then
    cat > ${CRACKER_STORAGE_BIN}/../enable_cracker << EOF
  #!/bin/bash
  export PATH="${CRACKER_STORAGE_BIN}:\$PATH"
EOF
  fi
}

function check_if_package_exists {
  #okay, seems that conan search given -r always will return success.. so we have to match by string instead.
  #this always searches in remove only.. which is against one of the arguments.
  if [[ $( conan search $conan_package -r=all ) = *"Existing recipe in remote"* ]]; then
     return 0
  else
     return 1
  fi
}

function crack {
  what=$1
  switch=$2
  switch_arg=$3
  used_name="$what"
  location=${CRACKER_STORAGE_BIN}/$1
  if [ -f $location ] ; then
    if ask_user "Location $location is already occupied" "overwrite with $what from $conan_package_name?"; then
      owner=$(extract_cracked_owner "$what")
      if [[ "$?" == "0" ]]; then 
        echo "owner is $owner"
        remove_entry "$what"
      else 
        echo "index is invalid... $what is wrapped by not owned by anything?"
      fi
      info "overriding $what."
      warn "this will not remove the mention of that package from its creator index! may result in unexpected issues."
      rm $location
    else
      continue
    fi
  fi
  if [ -d $location ]; then
    warn "Location $location is already occupied by a directory - possibly package with $what name exists, skipping"
    continue
  fi
  echo "Installing wrapper for: $what in $location"  
  cat <<EOT >> $location
#!/bin/bash
source $pkg_dir/activate_run.sh
source $pkg_dir/activate.sh
$what "\${@}"
EOT
  chmod +x $location
  append_cracked_to_index "$used_name"
}

#positional args
orig_args=( "${@}" )
args=()

conan_settings=()
conan_options=()


# named args
while [ "$1" != "" ]; do
  case "$1" in
    -r | --disable-rh-check )     skip_rh_check=yes;;
    -d | --deduce ) deduce_binaries=yes;;
    -g | --global-storage ) global_storage=yes;;
    -h | --help )                 usage;                   exit;; # quit and show usage
    -o ) conan_options+=( "-o" "$2" ); shift;;
    -s ) conan_settings+=( "-s" "$2" ); shift;;
    -sp | --storage-path ) CRACKER_STORAGE_DIR="$2"; unset CRACKER_STORAGE_BIN; shift;;
    -e ) generate_enable=yes;;
    --list ) do_list_cracked=yes;;
    --delete ) delete_wrappers="$2"; shift;;
    * )                           args+=("$1")             # if no match, add it to the positional args
    esac
    shift # move to next kv pair
done

# restore positional args
set -- "${args[@]}"

init_cache
generate_enable_script

if [[ -n "${do_list_cracked}" ]]; then
  list_cracked
  exit 0
fi

validate_args

command -v conan > /dev/null || error_exit "conan is not present in your path"
conan_package=$1
conan_package_name=$(echo "$conan_package" | cut -d'/' -f 1)
conan_package_version=$(echo "$conan_package" | cut -d'/' -f 2)

if [[ -n "$delete_wrappers" ]]; then
  delete_cracked "${delete_wrappers}"
  exit 0
fi

if [[ ! "$conan_package" = *"/"* ]]; then
  error_exit "Selected package:\"$conan_package\" does not contain slash? required form of: name/version."
fi 
if [[ ! "$conan_package" = *"@"* ]]; then
  conan_package=${conan_package}@
fi

if [[ ${#conan_package} -le 5 ]]; then
  error_exit "conan package ${conan_package} provided shorter than 5 characters.. conan does not handle that!"
fi

original_storage_path=$(conan config get storage.path)
if [[ -z $global_storage ]]; then
  conan config set storage.path=${CRACKER_STORAGE_DIR}
fi

check_if_package_exists || {
  conan config set storage.path=${original_storage_path}
  error_exit "Package $conan_package not found in cache. keep in mind that without -g argument only packages available in remotes will work."
}
conan config set storage.path=${original_storage_path}

shift

pkg_dir=${CRACKER_STORAGE_DIR}/.$conan_package_name
pkg_index=$pkg_dir/.cracker_index

if [[ -d $pkg_dir ]]; then
  if ask_user "Package $conan_package already cracked" "override?"; then
    info "deleting $conan_package from cracker_storage and all its installed packages."
    for p in $(cat $pkg_index 2>/dev/null ); do 
       info "deleting: ${CRACKER_STORAGE_DIR}/$p"
       rm -rf ${CRACKER_STORAGE_DIR}/$p
       #rework to new way.

    done
    rm -rf $pkg_dir
  else 
    warn "not overriding existing package - exiting."
    exit 0
  fi
fi 

#if global storage is set - we dont override storage.path.
if [[ -z $global_storage ]]; then
  conan config set storage.path=${CRACKER_STORAGE_DIR}
fi

conan install ${conan_package} "${conan_options[@]}" "${conan_settings[@]}" -g virtualenv -g virtualrunenv -if $pkg_dir 2>&1 || {
  conan config set storage.path=${original_storage_path}
  echo $output
  error_exit "Failed to install $conan_package_name"
}
conan config set storage.path=${original_storage_path} || error_exit "Unable to revert your storage path to previous value, your conan installation is now corrupted, previous path was: $original_storage_path"

if [[ -n "$deduce_binaries" ]]; then
  pkg_path=$(sed -n -r 's@^PATH="([^"]+).*@\1@p' $pkg_dir/environment_run.sh.env)
  if [[ -z $pkg_path ]] || [[ ! -d $pkg_path ]]; then
    error_exit "You wanted binary deduction but your binary does not seem to have valid PATH?"
  fi
  for bin in $(find $pkg_path -maxdepth 1 -type f -executable -printf "%f\n" ); do
    crack $bin
  done
fi

while test ${#} -gt 0; do
  crack $1 $2 $3
  if [[ "$2" == "--alias" ]]; then
    shift; shift;
  fi
  shift
done
